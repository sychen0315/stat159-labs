hist(xvar,
breaks = seq(0,300,20))
breaks = seq(0,250,20))
times = 1000
xmean = numeric(0)
xvar = numeric(0)
for (i in 1:times){
xlist = rnorm(25,0,10)
xmean[i] = mean(xlist)
xvar[i] = var(xlist)
}
hist(xmean)
hist(xvar,
breaks = seq(0,250,20))
hist(xvar)
setwd("~/")
malemean
help("rnorm")
sqrt(malevar)
help(rnorm)
norm25 <- rnorm(25, 0, 1)
norm25 <- rnorm(25, 0, 1)
norm50 <- rnorm(50, 0, 1)
norm100 <- rnorm(100, 0, 1)
norm100
help(qqplot)
qqnorm(norm25)
qqnorm(norm100)
qqnorm(norm50)
qqnorm(norm100, main = 'Normal Q-Q Plot for 100 data')
chi25 <- rchisq(25, 10)
chi25 <- rchisq(25, 10)
chi50 <- rchisq(50, 10)
chi100 <- rchisq(100, 10)
qchisq(ppoints(25),df = 10)
chi25
qqplot(qchisq(ppoints(25), df = 10), chi25 ,main = expression("Q-Q plot"))
qchisq(ppoints(25),df = 10)
ppoints(25)
help("ppoints")
qqplot(qchisq(ppoints(25), df = 10), chi25 ,main = expression("Q-Q plot"))
qqplot(qchisq(ppoints(50), df = 10), chi50 ,main = 'Chi-squared Q-Q plot for 50 data')
qqplot(qchisq(ppoints(100), df = 10), chi100 ,main = 'Chi-squared Q-Q plot for 100 data')
z_norm25 <- rnorm(25, 0, 1)
z_norm50 <- rnorm(50, 0, 1)
z_norm100 <- rnorm(100, 0, 1)
u_norm25 <- rnorm(25, 0, 1)
u_norm50 <- rnorm(50, 0, 1)
u_norm100 <- rnorm(100, 0, 1)
y25 <- z_norm25/u_norm25
y25
y25 <- z_norm25/u_norm25
y50 <- z_norm50/u_norm50
y100 <- z_norm100/u_norm100
qqnorm(chi25)
qqnorm(chi25, main = 'Normal Q-Q Plot for 25 data')
qqnorm(chi50, main = 'Normal Q-Q Plot for 50 data')
qqnorm(chi100, main = 'Normal Q-Q Plot for 100 data')
qqnorm(y25, main = 'Normal Q-Q Plot for 25 data')
qqnorm(y50, main = 'Normal Q-Q Plot for 50 data')
qqnorm(y100, main = 'Normal Q-Q Plot for 100 data')
y100
qqnorm(y100, main = 'Normal Q-Q Plot for 100 data')
qqnorm(y25, main = 'Normal Q-Q Plot for 25 data')
qqnorm(y50, main = 'Normal Q-Q Plot for 50 data')
qqnorm(y100, main = 'Normal Q-Q Plot for 100 data')
help(runif)
qqnorm(unif25, main = 'Normal Q-Q Plot for 25 data')
qqnorm(unif50, main = 'Normal Q-Q Plot for 50 data')
unif25 <- runif(25, min = 0, max = 1)
unif50 <- runif(50, min = 0, max = 1)
unif100 <- runif(100, min = 0, max = 1)
qqnorm(unif25, main = 'Normal Q-Q Plot for 25 data')
qqnorm(unif50, main = 'Normal Q-Q Plot for 50 data')
qqnorm(unif100, main = 'Normal Q-Q Plot for 100 data')
help(rexp)
exp25 <- rexp(25, 1)
exp50 <- rexp(50, 1)
exp100 <- rexp(100, 1)
qqnorm(exp25, main = 'Normal Q-Q Plot for 25 data')
qqnorm(exp50, main = 'Normal Q-Q Plot for 50 data')
qqnorm(exp100, main = 'Normal Q-Q Plot for 100 data')
qqline(exp100)
norm25 <- rnorm(25, 0, 1)
norm50 <- rnorm(50, 0, 1)
norm100 <- rnorm(100, 0, 1)
qqnorm(norm25, main = 'Normal Q-Q Plot for 25 data')
qqnorm(norm50, main = 'Normal Q-Q Plot for 50 data')
qqnorm(norm100, main = 'Normal Q-Q Plot for 100 data')
qqnorm(norm25, main = 'Normal Q-Q Plot for 25 data')
qqnorm(norm50, main = 'Normal Q-Q Plot for 50 data')
qqnorm(norm100, main = 'Normal Q-Q Plot for 100 data')
```
chi25 <- rchisq(25, 10)
chi50 <- rchisq(50, 10)
chi100 <- rchisq(100, 10)
qqnorm(chi25, main = 'Normal Q-Q Plot for 25 data')
qqnorm(chi50, main = 'Normal Q-Q Plot for 50 data')
qqnorm(chi100, main = 'Normal Q-Q Plot for 100 data')
z_norm25 <- rnorm(25, 0, 1)
z_norm50 <- rnorm(50, 0, 1)
z_norm100 <- rnorm(100, 0, 1)
u_norm25 <- rnorm(25, 0, 1)
u_norm50 <- rnorm(50, 0, 1)
u_norm100 <- rnorm(100, 0, 1)
y25 <- z_norm25/u_norm25
y50 <- z_norm50/u_norm50
y100 <- z_norm100/u_norm100
qqnorm(y25, main = 'Normal Q-Q Plot for 25 data')
qqnorm(y50, main = 'Normal Q-Q Plot for 50 data')
qqnorm(y100, main = 'Normal Q-Q Plot for 100 data')
```
d) Repeat part (a) for a uniform distribution.
```{r}
unif25 <- runif(25, min = 0, max = 1)
unif50 <- runif(50, min = 0, max = 1)
unif100 <- runif(100, min = 0, max = 1)
qqnorm(unif25, main = 'Normal Q-Q Plot for 25 data')
qqnorm(unif50, main = 'Normal Q-Q Plot for 50 data')
qqnorm(unif100, main = 'Normal Q-Q Plot for 100 data')
exp25 <- rexp(25, 1)
exp50 <- rexp(50, 1)
exp100 <- rexp(100, 1)
qqnorm(exp25, main = 'Normal Q-Q Plot for 25 data')
qqnorm(exp50, main = 'Normal Q-Q Plot for 50 data')
qqnorm(exp100, main = 'Normal Q-Q Plot for 100 data')
```
f) Can you distinguish between the normal distribution of part (a) and the sub- sequent nonnormal distributions?
qqnorm(chi100, main = 'Normal Q-Q Plot for 100 data')
qqnorm(chi50, main = 'Normal Q-Q Plot for 50 data')
qqnorm(chi25, main = 'Normal Q-Q Plot for 25 data')
type1 <- c(3.03,5.53,9.30,9.92,12.51,12.95,15.21,16.04,16.84)
type2 <- c(3.19,4.26,4.47,4.53,4.67,4.69,12.78,6.79,9.37,12.75)
type1_mu <- mean(type1)
type2_mu <- mean(type2)
type1_sd <- sd(type1)
type2_sd <- sd(type2)
sp <- ((length(type1)-1)*type1_sd^2+(length(type2)-1)*type2_sd^2)/(length(type1)+length(type2)-2)
tstat <- (type1_mu-type2_mu)/(sp*sqrt(1/length(type1)+1/length(type2)))
help(qt)
qt(0.01/2, 40)
length(type1)
length(type2)
qt(0.01/2, length(type1)+length(type2)-2)
tstat
-qt(0.1/2, length(type1)+length(type2)-2)
wilcox.test(type1,type2, correct=FALSE)
nonpar <- wilcox.test(type1,type2, correct=FALSE)
nonpar$p.value
nonpar$parameter
-qt(0.2/2, length(type1)+length(type2)-2)
-qt(0.5/2, length(type1)+length(type2)-2)
-qt(1/2, length(type1)+length(type2)-2)
help(rank)
rank(c(type1,type2))
sum.rank.1 = sum(rank(c(type1,type2))[1:length(type1)]) #sum of ranks assigned to the group 1
sum.rank.2 = sum(rank(c(type1,type2))[length(type1)+1:length(type2)]) #sum of ranks assigned to the group 2
W1 <- sum.rank.1-length(type1)*(length(type1)+1)/2
pi <- 1/(length(type1)*length(type2))*W1
pi
type1 <- c(3.03,5.53,5.60,9.30,9.92,12.51,12.95,15.21,16.04,16.84)
type2 <- c(3.19,4.26,4.47,4.53,4.67,4.69,12.78,6.79,9.37,12.75)
type1_mu <- mean(type1)
type2_mu <- mean(type2)
type1_sd <- sd(type1)
type2_sd <- sd(type2)
sp <- ((length(type1)-1)*type1_sd^2+(length(type2)-1)*type2_sd^2)/(length(type1)+length(type2)-2)
tstat <- (type1_mu-type2_mu)/(sp*sqrt(1/length(type1)+1/length(type2)))
-qt(0.1/2, length(type1)+length(type2)-2)
# tstat is less than 17 degree of freedom t score at 0.1 level. So we accept null hypothesis
```
b. Test the same hypothesis using a nonparametric method.
```{r}
nonpar <- wilcox.test(type1,type2, correct=FALSE)
nonpar$p.value
# Therefore, the p-value is between 0.05 and 0.10. Consequently, we will not reject H0 at α = 0.05, that is, the sample indicates that there is no difference between the two types of bearings. On the other hand, we will reject H0 at α = 0.10, that is, the sample indicates that there is some difference between the two types of bearings.
```
c. Which of the methods—that of part (a) or that of part (b)—do you think is better in this case?
part b method is better because it is not influenced by outliers and it works better for small sample size.
d. Estimateπ,the probability that a typeI bearing will outlast a typeII bearing.
```{r}
sum.rank.1 = sum(rank(c(type1,type2))[1:length(type1)]) #sum of ranks assigned to the group 1
sum.rank.2 = sum(rank(c(type1,type2))[length(type1)+1:length(type2)]) #sum of ranks assigned to the group 2
W1 <- sum.rank.1-length(type1)*(length(type1)+1)/2
pi <- 1/(length(type1)*length(type2))*W1
pi
```
e. Use the bootstrap to estimate the sampling distribution of πˆ and its standard error.
```{r}
treatment <- c(22.8,10.2,20.8,27,19.2,9,14.2)
control <- c(23.5,31.0,19.5,26.2,26.5,25.224.5,23.827.8,22)
control <- c(23.5,31.0,19.5,26.2,26.5,25.2,24.5,23.8,27.8,22)
lent <- length(treatment)
lenc <- length(control)
lent
lenc
treatment <- c(22.8,10.2,20.8,27,19.2,9,14.2,19.8,14.5,14.8)
control <- c(23.5,31.0,19.5,26.2,26.5,25.2,24.5,23.8,27.8,22)
lent <- length(treatment)
lenc <- length(control)
help("data.frame")
df <- data.frame(treatment = treatment, control = control)
df
plot(df)
plot(df$treatment)
lines(df$control)
plot(1, df$treatment)
lines(2, df$control)
boxplot(df$treatment ~ df$control, xlab = "Category", ylab = "Variable", border = "white")
points(df$treatment ~ df$control, pch = 1)
boxplot(df$treatment,df$control, xlab = "Category", ylab = "Variable", border = "white")
points(df$treatment, df$control, pch = 1)
boxplot(df$treatment,df$control, xlab = "Category", ylab = "Variable")
points(df$treatment, df$control, pch = 1)
points(df$treatment, df$control, pch = 1)
boxplot(df$treatment,df$control, xlab = "Category", ylab = "Variable", border = "white")
points(df$treatment, df$control, pch = 1)
points(df$treatment, df$control, pch = 10)
help("dotplot")
dotplot(df$treatment)
dotchart(df$treatment)
help("dotplot")
dotchart2(df$treatment, horizontal = FALSE)
dotchart(df$treatment, horizontal = FALSE)
dotchart(df$treatment, horizontal=FALSE)
points(df$treatment, pch = 1)
points(df$treatment, pch = 1)
points(df$treatment, pch = 1)
points(df$treatment, pch = 1)
df <- data.frame(treatment = treatment, control = control)
points(df$treatment, pch = 1)
points(df$treatment, pch = 1, horizontal = FALSE)
axis(2)
axis(1)
axis( las=1)
points(df$treatment, pch = 1 )
axis( las=1)
treatment <- c(22.8,10.2,20.8,27,19.2,9,14.2,19.8,14.5,14.8)
control <- c(23.5,31.0,19.5,26.2,26.5,25.2,24.5,23.8,27.8,22)
lent <- length(treatment)
lenc <- length(control)
df <- data.frame(treatment = treatment, control = control)
points(df$treatment, pch = 1 )
axis( las=1)
lines(df$treatment, pch = 1 )
axis( las=1)
lines(df$treatment, pch = 1 )
plot(df$treatment, pch = 1 )
plot(df$treatment, lty = 1)
plot(df$treatment, lty = "-")
plot(df$treatment)
axis( las=1)
lines(df$control)
lines(df$treatment)
axis(las=1)
abline(h = df$treatment)
abline(h = df$treatment)
abline(v = df$treatment)
plot(c(1,1,1,1,1,1,1,1,1,1),df$treatment)
plot(rep(1,10),df$treatment)
points(rep(2,10),df$control)
points(rep(2,10),df$control)
lines(rep(2,10),df$control)
plot(rep(1,10),df$treatment)
lines(rep(2,10),df$control)
rep(2,10)
lines(rep(1.2,10),df$control)
plot(rep(1,10),df$treatment, xlim = c(0,2))
points(rep(2,10),df$control)
plot(rep(1,10),df$treatment, xlim = c(0,2), ylim = c(5,35))
points(rep(2,10),df$control)
xlab = "category", ylab = "weight gains")
plot(rep(1,10),df$treatment, xlim = c(0,2), ylim = c(5,35),
xlab = "category", ylab = "weight gains")
plot(rep(1,10),df$treatment, xlim = c(0,2), ylim = c(5,35),
xlab = "category", ylab = "weight gains")
points(rep(2,10),df$control)
type1 <- c(3.03,5.53,5.60,9.30,9.92,12.51,12.95,15.21,16.04,16.84)
type2 <- c(3.19,4.26,4.47,4.53,4.67,4.69,12.78,6.79,9.37,12.75)
type1_mu <- mean(type1)
type2_mu <- mean(type2)
type1_sd <- sd(type1)
type2_sd <- sd(type2)
sp <- sqrt((length(type1)-1)*type1_sd^2+(length(type2)-1)*type2_sd^2)/(length(type1)+length(type2)-2)
tstat <- (type1_mu-type2_mu)/(sp*sqrt(1/length(type1)+1/length(type2)))
-qt(0.1/2, length(type1)+length(type2)-2)
tstat
-qt(0.05/2, length(type1)+length(type2)-2)
sp <- sqrt(((length(type1)-1)*type1_sd^2+(length(type2)-1)*type2_sd^2)/(length(type1)+length(type2)-2))
tstat <- (type1_mu-type2_mu)/(sp*sqrt(1/length(type1)+1/length(type2)))
-qt(0.05/2, length(type1)+length(type2)-2)
tstat
treatment_mu <- mean(treatment)
control_mu <- mean(control)
treatment_sd <- sd(treatment)
control_sd <- sd(control)
sp <- sqrt(((lent-1)*treatment_sd^2+(lenc-1)*control_sd^2)/(lenc+lent-2))
tscore <- -qt(0.05/2, lenc+lent-2)
c((control_mu-treatment_mu)-tscore*sp, (control_mu-treatment_mu)+tscore*sp)
sp
c((control_mu-treatment_mu)-tscore*sp*sqrt(1/lenc+1/lent), (control_mu-treatment_mu)+tscore*sp*sqrt(1/lenc+1/lent))
tstat <- (control_mu-treatment_mu)/(sp*sqrt(1/lenc+1/lent))
tstat
pt(3.780581,28)
2* pt(3.780581,28,lower.tail = FALSE)
tstat <- (control_mu-treatment_mu)/(sp*sqrt(1/lenc+1/lent))
pvalue <- 2*pt(tstat,lenc+lent-2,lower.tail = FALSE)
pvalue
lenc+lent-2
nonpar <- wilcox.test(treatment,control, correct=FALSE)
nonpar$p.value
tscore
tstat
sp
pvalue
nonpar
treatment_median <- median(treatment)
control_median <- median(control)
treatment_median-control_median
-qt(0.05/2, 174)
-qt(0.1/2, 174)
-qt(0.2/2, 174)
-qt(0.001/2, 174)
rep(0, 100)
pi_est
pi_est <- rep(0, 100)
length(pi_est)
pi_est <- rep(0, 100)
for (i in 1:100) {
type1_sample <- sample(type1, 10, replace = TRUE)
type2_sample <- sample(type2, 10, replace = TRUE)
sum.rank.type1 <- sum(rank(c(type1_sample,type2_sample))[1:length(type1_sample)])
pi_hat <- (sum.rank.type1-10*11/2)/100
pi_est[i] <- pi_hat
}
hist(pi_est)
pi_se <- sd(pi_est)/sqrt(length(pi_est))
pi_se
c(mean(pi_est)-pi_se*qt(0.95,99), mean(pi_est)+pi_se*qt(0.95,99))
med_diff_boot <- rep(0, 100)
for (i in 1:100) {
treatment_sample <- sample(treatment,10,replace = TRUE)
control_sample <- sample(control,10,replace=TRUE)
med_diff_boot[i] <- median(treatment_sample)-median(control_sample)
}
hist(med_diff_boot)
hist(med_diff_boot)
se_diff <- sd(med_diff_boot)/sqrt(length(med_diff_boot))
se_diff
c(mean(med_diff_boot)-se_diff*qt(0.975,99),
mean(med_diff_boot)-se_diff*qt(0.975,99))
qt(0.975,99)
c(mean(med_diff_boot)-se_diff*qt(0.975,99),
mean(med_diff_boot)+se_diff*qt(0.975,99))
qt(0.05, 48)
help(qt)
qt(0.05, 48, lower.tail = FALSE)
pt(0.9687, 48)
pt(0.9687, 48, lower.tail = FALSE)
qt(0.05/2,48,lower.tail = FALSE)
PT(1.304,48,lower.tail = FALSE)
pt(1.304,48,lower.tail = FALSE)
pt(1.25,48,lower.tail = FALSE)
help(fft)
help(mod)
help(Mod)
a1 <- arima.sim(model = list(ar=0.5), 128)
a2 <- arima.sim(model = list(ar=0.5), 256)
a3 <- arima.sim(model = list(ar=0.5), 512)
a4 <- arima.sim(model = list(ar=0.5), 1024)
a1
a2
a4
spec.pgram
help(spec.pgram)
a1 <- arima.sim(model = list(ar=0.5), 128)
q <- spec.pgram(a1)
f <- function(x){
1/abs(arp(exp(-2i*pi*x)))^2
}
grid <- (0:50) / 100
lines(grid, f(grid), lty=2)
q <- spec.pgram(a1, ylim=c(0,40))
a1 <- arima.sim(model = list(ar=0.5), 128)
q <- spec.pgram(a1, ylim=c(0,40))
q <- spec.pgram(a1, log =0,ylim=c(0,40))
grid <- (0:50) / 100
q <- spec.pgram(a1, log ="no",ylim=c(0,40))
q <- spec.pgram(a1, log ="no",ylim=c(0,40), taper=0, index, function))
q <- spec.pgram(a1, log ="no",ylim=c(0,40), taper=0)
q <- spec.pgram(a3, log ="no",ylim=c(0,40), taper=0)
q <- spec.pgram(a4, log ="no",ylim=c(0,40), taper=0)
a1 <- arima.sim(model = list(ar=0.5), 128)
q <- spec.pgram(a1, log ="no", taper=0)
q <- spec.pgram(a4, log ="no", taper=0)
q <- spec.pgram(a4, taper=0)
help(arima.sim)
AR1_128 <- arima.sim(model = list(ar= c(0,1/1.01^2), ma = c(1/4)), 128)
AR1_128
plot.spec.phase()
plot.spec.phase(AR1_128)
spectrum(AR1_128)
spec.pgram(AR1_128, log = "no",  taper=0)
x <- arima.sim(model = list(ar= c(0,1/1.01^2),ma = 1/4  ), 128)
spec.pgram(x, log = "no",  taper=0)
x <- arima.sim(model = list(ar= c(0,1/1.01^2),ma = 1/4  ), 128)
spec.pgram(x, log = "no",  taper=0)
spec.pgram(x,  taper=0)
spec.pgram(x, log = "no",  taper=0)
table
?table
x <- c(1:10)
summary(x)
plot(x,y)
x <- c(1:10)
y <- c(10:1)
plot(x,y)
install.packages()
R CMD install.packages()
setwd("~/")
pwd
pwd()
setwd("~/Documents/Stat 159/stat159-labs/stat159-lab7/test-that/tests")
library(testthat)
test_file("tests/tests.R")
install.packages("testthat")
library(testthat)
test_file("tests/tests.R")
library(testthat)
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
1L
type(1L)
type(1L)
typeof(1L)
typeof(1L)
typeof(1L)
test_file("tests.R")
max(w)
w <- letters[1:5]
max(w)
max(w)-min(w)
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
x <- c(1, 2, 3, 4, 5, NA)
missing_values(x)
help(max)
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
x <- c(1, 2, 3, 4, 5)
typeof(x)
typeof(x)
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
range(x)
IQR(X)
IQR(x)
sd(x)
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
mean(x,na.rm = TRUE)
X
y <- c(1, 2, 3, 4, NA)
mean(y,na.rm = TRUE)
mean(y)
range(y)
mean(y,na.rm = TRUE)
median(y,na.rm = TRUE)
range(y,na.rm = TRUE)
IQR(y,na.rm = TRUE)
sd(y,na.rm = TRUE)
test_file("tests.R")
descriptive_stats(x)
descriptive_stats <- function(x,na.rm=FALSE){
c(median(x,na.rm),mean(x,na.rm),range(x,na.rm),
IQR(x,na.rm),sd(x,na.rm),sum(is.na(x)))
}
descriptive_stats(x)
test_file("tests.R")
test_file("tests.R")
descriptive_stats(x)
expect_equal(descriptive_stats(x),
c(3,3,c(1,5),2,sd(x)), 0)
test_file("tests.R")
expect_equal(descriptive_stats(x),
c(3,3,c(1,5),2,sd(x), 0))
expect_length(descriptive_stats(x), 7)
expect_length(descriptive_stats(y), 7)
descriptive_stats(y)
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
setwd("~/Documents/Stat 159/stat159-labs/stat159-lab7/test-that/tests")
test_file("tests.R")
setwd("~/Documents/Stat 159/stat159-labs/stat159-lab7/test-that/tests")
test_file("tests.R")
test.file("tests.R")
library(testthat)
test_file("tests.R")
